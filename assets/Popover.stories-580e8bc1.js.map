{"version":3,"file":"Popover.stories-580e8bc1.js","sources":["../../packages/Popover/src/Popover.tsx"],"sourcesContent":["import * as React from 'react'\nimport { Portal } from '@c4605/react-portal'\nimport { SimpleJSON } from '@c4605/ts-types'\n\nexport interface PopoverVisibleInfo {\n  visible: boolean\n\n  popoverTop: number\n  popoverLeft: number\n}\n\nexport type PopoverStyle = React.CSSProperties & SimpleJSON\n\nexport interface PopoverVisibleChangeReason {\n  event?: Event\n}\n\nexport interface PopoverProps {\n  /** Trigger element renderer */\n  trigger: () => React.ReactNode\n  /** Popover content renderer */\n  content: () => React.ReactNode\n  /** Trigger container element class */\n  triggerClassName: string\n  /** Popover container element class */\n  popoverClassName: string\n  /** Generate popover container inline styles */\n  popoverStyle: (info: PopoverVisibleInfo) => PopoverStyle\n  /** Popover open cause */\n  openOn: 'hover' | 'click'\n  /** Popover close cause */\n  closeOn: 'hover' | 'click' | 'clickInside' | 'clickOutside'\n  /** Popover visiblity */\n  visible?: boolean\n  /** Callback when popover visiblity needs to be changed */\n  onVisibleChange: (\n    visible: boolean,\n    reason: PopoverVisibleChangeReason,\n  ) => void\n  /** If set to true, popover won't be shown, popoverStyle, content, onVisibleChange won't be called */\n  disabled: boolean\n  /** Set to true to render content inline */\n  inline: boolean\n}\n\nexport interface PopoverState {\n  popoverTop: number\n  popoverLeft: number\n  triggerContainer: HTMLDivElement | null\n  contentContainer: HTMLDivElement | null\n}\n\nlet popoverContainer: HTMLDivElement | null = null\n\n/**\n * By default, the visible state hosted by Popover.\n *\n * If supplied `visible` prop, Popover will follow the\n * [State Up](https://reactjs.org/docs/lifting-state-up.html) pattern, and when\n * need change visible state, will call `onVisibleChange(expectedVisibleState)`\n */\nexport class Popover extends React.PureComponent<PopoverProps, PopoverState> {\n  static displayName = 'Popover'\n\n  static get popoverContainer(): HTMLElement | null {\n    return popoverContainer\n  }\n\n  static defaultProps = {\n    triggerClassName: '',\n    popoverClassName: '',\n    openOn: 'hover' as const,\n    closeOn: 'hover' as const,\n    disabled: false,\n    inline: false,\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    onVisibleChange: /* istanbul ignore next */ () => {},\n    popoverStyle: (info: PopoverVisibleInfo): PopoverStyle => ({\n      position: 'absolute',\n      top: `${info.popoverTop}px`,\n      left: `${info.popoverLeft}px`,\n      display: 'block',\n      visibility: info.visible ? 'visible' : 'hidden',\n      transform: 'translateX(-50%)',\n    }),\n  }\n\n  readonly state: PopoverState = {\n    popoverTop: 0,\n    popoverLeft: 0,\n    triggerContainer: null,\n    contentContainer: null,\n  }\n\n  render(): JSX.Element {\n    return (\n      <>\n        <div\n          ref={this.triggerContainerRef}\n          className={`Popover__trigger ${this.props.triggerClassName}`}\n          onClick={this.onTriggerClick}\n          onMouseEnter={this.onMouseEnter}\n          onMouseLeave={this.onMouseLeave}\n        >\n          {this.props.trigger()}\n        </div>\n        <Portal\n          className={`Popover__container ${this.props.popoverClassName}`}\n          style={this.popoverStyle()}\n          parent={this.getPopoverParent()}\n          visible={this.visible}\n          onVisibleChange={this.changeVisible}\n        >\n          <div\n            ref={this.contentContainerRef}\n            className=\"Popover__content\"\n            onMouseEnter={this.onMouseEnter}\n            onMouseLeave={this.onMouseLeave}\n          >\n            {!this.visible ? null : this.props.content()}\n          </div>\n        </Portal>\n      </>\n    )\n  }\n\n  private triggerContainerRef = (el: HTMLDivElement | null): void => {\n    this.setState({ triggerContainer: el })\n  }\n  private contentContainerRef = (el: HTMLDivElement | null): void => {\n    this.setState({ contentContainer: el })\n  }\n\n  private getPopoverParent(): null | HTMLDivElement {\n    if (this.props.inline) return null\n\n    if (!popoverContainer) {\n      popoverContainer = document.createElement('div')\n      document.body.appendChild(popoverContainer)\n    }\n\n    return popoverContainer\n  }\n\n  private popoverStyle(): undefined | PopoverStyle {\n    if (this.props.disabled) return\n    // istanbul ignore next\n    if (!document.scrollingElement) return\n    // istanbul ignore next\n    if (!this.state.triggerContainer) return\n    return this.props.popoverStyle({\n      visible: this.visible,\n      ...this.getPositionInfo(\n        this.state.triggerContainer,\n        document.scrollingElement,\n      ),\n    })\n  }\n\n  private clickClose = (event: MouseEvent): undefined | boolean => {\n    // istanbul ignore next\n    if (!this.state.triggerContainer) return\n    // istanbul ignore next\n    if (!this.state.contentContainer) return\n    // istanbul ignore next\n    if (\n      !(event.target instanceof HTMLElement) &&\n      !(event.target instanceof SVGElement)\n    ) {\n      return\n    }\n\n    if (this.props.closeOn === 'click') {\n      return true\n    }\n\n    const clickInside =\n      this.state.triggerContainer.contains(event.target) ||\n      this.state.contentContainer.contains(event.target)\n    if (this.props.closeOn === 'clickInside') {\n      return clickInside\n    } else if (this.props.closeOn === 'clickOutside') {\n      return !clickInside\n    }\n\n    // istanbul ignore next\n    return\n  }\n\n  private get visible(): boolean {\n    if (this.props.disabled) return false\n    return !!this.props.visible\n  }\n\n  private changeVisible = (\n    visible: boolean,\n    reason: PopoverVisibleChangeReason,\n  ): void => {\n    if (\n      visible === false &&\n      reason?.event instanceof MouseEvent &&\n      reason.event.type === 'click' &&\n      !this.clickClose(reason.event)\n    ) {\n      return\n    }\n\n    // istanbul ignore next\n    visible = this.props.disabled ? false : visible\n    // istanbul ignore next\n    if (this.visible === visible) return\n    this.props.onVisibleChange(visible, reason)\n  }\n\n  private getPositionInfo(\n    trigger: HTMLElement,\n    scrollingElement: Element,\n  ): Pick<PopoverState, 'popoverTop' | 'popoverLeft'> {\n    const rect = trigger.getBoundingClientRect()\n\n    return {\n      popoverTop: scrollingElement.scrollTop + rect.bottom,\n      popoverLeft: scrollingElement.scrollLeft + rect.left + rect.width / 2,\n    }\n  }\n\n  private onTriggerClick = (event: React.MouseEvent): void => {\n    if (this.props.disabled) return\n    if (this.props.openOn !== 'click') return\n    // istanbul ignore next\n    if (!document.scrollingElement) return\n    // istanbul ignore next\n    if (!this.state.triggerContainer) return\n    this.setState(\n      this.getPositionInfo(\n        this.state.triggerContainer,\n        document.scrollingElement,\n      ),\n    )\n    this.changeVisible(true, { event: event.nativeEvent })\n  }\n\n  private onMouseEnter = (event: React.MouseEvent): void => {\n    if (this.props.disabled) return\n    if (this.props.openOn !== 'hover') return\n    // istanbul ignore next\n    if (!document.scrollingElement) return\n    // istanbul ignore next\n    if (!this.state.triggerContainer) return\n    this.setState(\n      this.getPositionInfo(\n        this.state.triggerContainer,\n        document.scrollingElement,\n      ),\n    )\n    this.changeVisible(true, { event: event.nativeEvent })\n  }\n\n  private onMouseLeave = (event: React.MouseEvent): void => {\n    // istanbul ignore next\n    if (this.props.disabled) return\n    if (this.props.closeOn !== 'hover') return\n    this.changeVisible(false, { event: event.nativeEvent })\n  }\n}\n"],"names":["popoverContainer","_Popover","React.PureComponent","el","event","clickInside","visible","reason","jsxs","Fragment","jsx","Portal","trigger","scrollingElement","rect","info","Popover"],"mappings":"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"}